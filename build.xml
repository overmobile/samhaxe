<project name="SamHaXe" default="samhaxe" basedir=".">
   <description>
      SamHaXe: a flash resource assembly tool
   </description>

   <property name="version" value="1.0-mojito"/>
   
   <property environment="env"/>
  
   <!-- OS properties -->
   <condition property="is-windows">
      <os family="windows"/>
   </condition>
   
   <condition property="is-unix">
      <and>
         <os family="unix"/>
         <not>
            <os name="Darwin"/>
         </not>
      </and>
   </condition>
   
   <condition property="is-osx">
      <or>
         <os family="mac"/>
         <os name="Darwin" family="unix"/>
      </or>
   </condition>
   
   <!-- haXe define for OS -->
   <condition property="haxe.os" value="WINDOWS">
      <isset property="is-windows"/>
   </condition>
   
   <condition property="haxe.os" value="UNIX">
      <isset property="is-unix"/>
   </condition>
   
   <condition property="haxe.os" value="OSX">
      <isset property="is-osx"/>
   </condition>
   
   <!-- include config.ant -->
   <property file="config.ant"/>
   
   <!-- defaults for all configuration values -->
   <property name="haxe.path" location="${env.HAXEPATH}"/>
   <property name="haxe.stdpath" location="${haxe.path}/std"/>
   <property name="haxe.debug" value="false"/>
   <property name="cpp.compiler" value="g++"/>
   
   <!-- compiler properties -->
   <condition property="is-gcc">
      <equals arg1="${cpp.compiler}" arg2="g++"/>
   </condition>
   <condition property="is-msvc">
      <equals arg1="${cpp.compiler}" arg2="msvc"/>
   </condition>
   <condition property="is-mingw">
      <and>
         <isset property="is-windows"/>
         <isset property="is-gcc"/>
      </and>
   </condition>

   <property name="naturaldocs.path" location="${basedir}"/>

   <property name="image.module" value="imagemagick"/>
   
   <condition property="is-imagemagick">
      <equals arg1="${image.module}" arg2="imagemagick"/>
   </condition>
   
   <condition property="is-devil">
      <equals arg1="${image.module}" arg2="devil"/>
   </condition>

   <!-- ImageMagick defaults -->
   <condition property="imagemagick.include.path" value=".">
      <isset property="is-imagemagick"/>
   </condition>

   <condition property="imagemagick.library.path" value=".">
      <isset property="is-imagemagick"/>
   </condition>

   <condition property="imagemagick.library.name" value="CORE_RL_wand_">
      <and>
         <isset property="is-imagemagick"/>
         <isset property="is-windows"/>
      </and>
   </condition>
   
   <condition property="imagemagick.library.name" value="Wand">
      <and>
         <isset property="is-imagemagick"/>
         <or>
            <isset property="is-unix"/>
            <isset property="is-osx"/>
         </or>
      </and>
   </condition>

   <!-- DevIL defaults -->
   <condition property="devil.include.path" value=".">
      <isset property="is-devil"/>
   </condition>

   <condition property="devil.library.path" value=".">
      <isset property="is-devil"/>
   </condition>

   <condition property="devil.base.library.name" value="DevIL">
      <and>
         <isset property="is-devil"/>
         <isset property="is-windows"/>
      </and>
   </condition>
   
   <condition property="devil.base.library.name" value="IL">
      <and>
         <isset property="is-devil"/>
         <or>
            <isset property="is-unix"/>
            <isset property="is-osx"/>
         </or>
      </and>
   </condition>
   
   <condition property="devil.util.library.name" value="ILU">
      <isset property="is-devil"/>
   </condition>

   <property name="neko.include.path" value="."/>
   <property name="neko.library.path" value="."/>

   <condition property="freetype.include.path" value="/usr/include">
      <or>
         <isset property="is-unix"/>
         <isset property="is-osx"/>
      </or>
   </condition>
   <property name="freetype.inclue.path" value="."/>
   <property name="freetype.library.path" value="."/>
   
   <condition property="freetype.library.name" value="freetype6">
      <and>
         <isset property="is-windows"/>
         <isset property="is-gcc"/>
      </and>
   </condition>
   <property name="freetype.library.name" value="freetype"/>
   
   <condition property="haxe.debug.arg" value="-debug -D DEBUG">
      <equals arg1="${haxe.debug}" arg2="true"/>
   </condition>
   
   <condition property="haxe.debug.arg" value="">
      <equals arg1="${haxe.debug}" arg2="false"/>
   </condition>
      
   <condition property="naturaldocs.executable" value="${naturaldocs.path}/NaturalDocs.bat">
      <isset property="is-windows"/>
   </condition>
   
   <condition property="naturaldocs.executable" value="NaturalDocs">
      <or>
         <isset property="is-unix"/>
         <isset property="is-osx"/>
      </or>
   </condition>

   <property name="install.path" location="/usr/local"/>
   <property name="install.path.bin" location="${install.path}/bin"/>
   <property name="install.path.modules" location="${install.path}/lib/samhaxe"/>
   <property name="install.path.doc" location="${install.path}/doc/samhaxe"/>

   <condition property="install.path.config" value="${install.path.bin}">
      <isset property="is-windows"/>
   </condition>
   <condition property="install.path.config" value="/etc">
      <or>
         <isset property="is-unix"/>
         <isset property="is-osx"/>
      </or>
   </condition>

   <condition property="samhaxe.executable" value="SamHaXe.exe">
      <isset property="is-windows"/>
   </condition>
   <condition property="samhaxe.executable" value="SamHaXe">
      <or>
         <isset property="is-unix"/>
         <isset property="is-osx"/>
      </or>
   </condition>

   <!-- include external task definitions -->
   <taskdef resource="net/wildwinter/anthx/anthx.properties" classpath="${basedir}/lib/AntHX.jar"/>
   <taskdef resource="cpptasks.tasks" classpath="${basedir}/lib/cpptasks.jar"/>
   
   <haxeEnv haxePath="${haxe.path}"/>
  
   <!-- directory properties -->
   <property name="srcdir" location="${basedir}/src"/>
   <property name="srcdir.modules" location="${srcdir}/modules"/>
   <property name="srcdir.native" location="${srcdir}/modules/native"/>
   <property name="objdir" location="${basedir}/obj"/>
   <property name="bindir" location="${basedir}/bin"/>
   <property name="libdir" location="${basedir}/lib"/>
   <property name="bindir.modules" location="${bindir}/modules"/>
   <property name="bindir.native" location="${bindir}/modules/native"/>
   <property name="demodir" location="${basedir}/demos"/>
   <property name="demodir.bin" location="${demodir}/bin"/>
   <property name="demodir.bin.assets" location="${demodir.bin}/assets"/>
   <property name="demodir.bin.apps" location="${demodir.bin}/apps"/>
   <property name="docdir" location="${basedir}/doc"/>
   <property name="distdir" location="${basedir}/dist"/>
   <property name="naturaldocs.dir" location="${basedir}/NaturalDocs"/>
   <property name="naturaldocs.datadir" location="${naturaldocs.dir}/Data"/>
   
   <path id="project.classpath">
      <pathelement location="${haxe.stdpath}"/>
      <pathelement location="${basedir}/lib/hxformat"/>
      <pathelement location="${srcdir}"/>
   </path>
  
   <!-- -init target: create directory structure -->
   <target name="-init">
      <mkdir dir="${objdir}"/>
      <mkdir dir="${bindir}"/>
      <mkdir dir="${bindir.modules}"/>
      <mkdir dir="${bindir.native}"/>
      <mkdir dir="${docdir}"/>
      <mkdir dir="${demodir.bin}"/>
      <mkdir dir="${demodir.bin.assets}"/>
      <mkdir dir="${demodir.bin.apps}"/>
   </target>

   <!-- samhaxe target: build Sam HaXe and its modules -->
   <target name="samhaxe" depends="-init, modules" description="compile SamHaXe">
      <echo message="Building SamHaXe"/>
      <haxe2neko dir="${srcdir}" main="SamHaXe" out="${bindir}/SamHaXe.n" cacheFolder="${objdir}">
         <classpath refid="project.classpath"/>
         <arg line="${haxe.debug.arg}"/>
         <arg line="-D ${haxe.os}"/>
      </haxe2neko>

      <exec dir="${bindir}" executable="nekotools">
         <arg value="boot"/>
         <arg value="${bindir}/SamHaXe.n"/>
      </exec>

      <copy file="${basedir}/samhaxe.conf.xml.template" tofile="${bindir}/samhaxe.conf.xml"/>
      <replace file="${bindir}/samhaxe.conf.xml" token="##PATH##" value="${bindir.modules}"/>
   </target>

   <!-- modules target: modules and native modules -->
   <target name="modules" depends="-init, native" description="compile SamHaXe modules">
      <echo message="Building Binary.n"/>
      <haxe2neko dir="${srcdir.modules}" main="Binary" out="${bindir.modules}/Binary.n" cacheFolder="${objdir}">
         <classpath refid="project.classpath"/>
         <arg line="${haxe.debug.arg}"/>
         <arg line="-D ${haxe.os}"/>
      </haxe2neko>
      
      <echo message="Building Image.n"/>
      <haxe2neko dir="${srcdir.modules}" main="Image" out="${bindir.modules}/Image.n" cacheFolder="${objdir}">
         <classpath refid="project.classpath"/>
         <arg line="${haxe.debug.arg}"/>
         <arg line="-D ${haxe.os}"/>
      </haxe2neko>
      
      <echo message="Building Sound.n"/>
      <haxe2neko dir="${srcdir.modules}" main="Sound" out="${bindir.modules}/Sound.n" cacheFolder="${objdir}">
         <classpath refid="project.classpath"/>
         <arg line="${haxe.debug.arg}"/>
         <arg line="-D ${haxe.os}"/>
      </haxe2neko>
      
      <echo message="Building Compose.n"/>
      <haxe2neko dir="${srcdir.modules}" main="Compose" out="${bindir.modules}/Compose.n" cacheFolder="${objdir}">
         <classpath refid="project.classpath"/>
         <arg line="${haxe.debug.arg}"/>
         <arg line="-D ${haxe.os}"/>
      </haxe2neko>
      
      <echo message="Building Font.n"/>
      <haxe2neko dir="${srcdir.modules}" main="Font" out="${bindir.modules}/Font.n" cacheFolder="${objdir}">
         <classpath refid="project.classpath"/>
         <arg line="${haxe.debug.arg}"/>
         <arg line="-D ${haxe.os}"/>
      </haxe2neko>
      
      <echo message="Building Swf.n"/>
      <haxe2neko dir="${srcdir.modules}" main="Swf" out="${bindir.modules}/Swf.n" cacheFolder="${objdir}">
         <classpath refid="project.classpath"/>
         <arg line="${haxe.debug.arg}"/>
         <arg line="-D ${haxe.os}"/>
      </haxe2neko>

   </target>

   <!-- -native-image target: build native image module -->
   <target name="-native-image-imagemagick" if="is-imagemagick">
      <cc name="${cpp.compiler}" subsystem="console" debug="false" outtype="shared" objdir="${objdir}" outfile="${objdir}/image-imagemagick">
         <fileset file="${srcdir.native}/image-imagemagick.cpp"/>
         <compilerarg value="/EHsc" if="is-msvc"/>
         <includepath>
            <pathelement location="${imagemagick.include.path}"/>
            <pathelement location="${neko.include.path}"/>
         </includepath>
            
         <linker name="g++" unless="is-msvc">
            <!-- Hack for some OSX variants where cpptasks doesn't correctly indentify OS -->
            <linkerarg value="-dynamiclib" if="is-osx"/>

            <libset dir="${imagemagick.library.path}" libs="${imagemagick.library.name}" unless="is-mingw"/>
            <libset dir="${neko.library.path}" libs="neko" unless="is-mingw"/>
            
            <!-- Link directly to DLLs in case of MinGW -->
            <linkerarg value="${imagemagick.library.path}/${imagemagick.library.name}.dll" if="is-mingw"/>
            <linkerarg value="${neko.library.path}/neko.dll" if="is-mingw"/>
         </linker>
         
         <linker name="msvc" if="is-msvc">
            <libset dir="${imagemagick.library.path}" type="shared" libs="${imagemagick.library.name}"/>
            <libset dir="${neko.library.path}" type="shared" libs="neko"/>
         </linker>

      </cc>
      <move file="${objdir}/image-imagemagick.dll" tofile="${bindir.native}/image.ndll" failonerror="false"/>
      <move file="${objdir}/libimage-imagemagick.so" tofile="${bindir.native}/image.ndll" failonerror="false"/>
      <move file="${objdir}/image-imagemagick.dylib" tofile="${bindir.native}/image.ndll" failonerror="false"/>
   </target>
   
   <target name="-native-image-devil" if="is-devil">
      <cc name="${cpp.compiler}" subsystem="console" debug="false" outtype="shared" objdir="${objdir}" outfile="${objdir}/image-devil">
         <fileset file="${srcdir.native}/image-devil.cpp"/>
         <compilerarg value="/EHsc" if="is-msvc"/>
         <includepath>
            <pathelement location="${devil.include.path}"/>
            <pathelement location="${neko.include.path}"/>
         </includepath>
            
         <linker name="g++" unless="is-msvc">
            <!-- Hack for some OSX variants where cpptasks doesn't correctly indentify OS -->
            <linkerarg value="-dynamiclib" if="is-osx"/>

            <libset dir="${devil.library.path}" libs="${devil.base.library.name}"/>
            <libset dir="${devil.library.path}" libs="${devil.util.library.name}"/>
            <libset dir="${neko.library.path}" libs="neko" unless="is-mingw"/>
            
            <!-- Link directly to neko DLL in case of MinGW -->
            <linkerarg value="${neko.library.path}/neko.dll" if="is-mingw"/>
         </linker>
         
         <linker name="msvc" if="is-msvc">
            <libset dir="${devil.library.path}" type="shared" libs="${devil.base.library.name}"/>
            <libset dir="${devil.library.path}" type="shared" libs="${devil.util.library.name}"/>
            <libset dir="${neko.library.path}" type="shared" libs="neko"/>
         </linker>

      </cc>
      <move file="${objdir}/image-devil.dll" tofile="${bindir.native}/image.ndll" failonerror="false"/>
      <move file="${objdir}/libimage-devil.so" tofile="${bindir.native}/image.ndll" failonerror="false"/>
      <move file="${objdir}/image-devil.dylib" tofile="${bindir.native}/image.ndll" failonerror="false"/>
   </target>

   
   <!-- -native-font target: build native font module -->
   <target name="-native-font">
      <cc name="${cpp.compiler}" subsystem="console" debug="false" link="shared" objdir="${objdir}" outfile="${objdir}/font">
         <fileset file="${srcdir.native}/font.cpp"/>
         <compilerarg value="/EHsc" if="is-msvc"/>
         <includepath>
            <pathelement location="${freetype.include.path}"/>
            <pathelement location="${freetype.include.path}/freetype2"/>
            <pathelement location="${freetype.include.path}/freetype2/freetype"/>
            <pathelement location="${neko.include.path}"/>
         </includepath>

         <linker name="g++" unless="is-msvc">
            <!-- Hack for some OSX variants where cpptasks doesn't correctly indentify OS -->
            <linkerarg value="-dynamiclib" if="is-osx"/>
         
            <libset dir="${freetype.library.path}" libs="${freetype.library.name}" unless="is-mingw"/>
            <libset dir="${neko.library.path}" libs="neko" unless="is-mingw"/>
         
            <!-- Link directly to DLLs in case of MinGW -->
            <linkerarg value="${freetype.library.path}/${freetype.library.name}.dll" if="is-mingw"/>
            <linkerarg value="${neko.library.path}/neko.dll" if="is-mingw"/>
         </linker>

         <linker name="msvc" if="is-msvc">
            <libset dir="${freetype.library.path}" type="shared" libs="${freetype.library.name}"/>
            <libset dir="${neko.library.path}" type="shared" libs="neko"/>
         </linker>
      </cc>
      <move file="${objdir}/font.dll" tofile="${bindir.native}/font.ndll" failonerror="false"/>
      <move file="${objdir}/libfont.so" tofile="${bindir.native}/font.ndll" failonerror="false"/>
      <move file="${objdir}/font.dylib" tofile="${bindir.native}/font.ndll" failonerror="false"/>
   </target>

   <!-- native target: build native image and font modules -->
   <target name="native" depends="-init, -native-image-imagemagick, -native-image-devil, -native-font" description="compile native modules">
   </target>
   
   <!-- clean target: restore project to its inital state -->
   <target name="clean" description="clean up binaries, documentation and temporary files">
      <delete dir="${objdir}"/>
      <delete dir="${bindir}"/>
      <delete dir="${docdir}"/>
      <delete dir="${naturaldocs.datadir}"/>
      <delete dir="${demodir.bin}"/>
   </target>

   <!-- doc target: build documentation -->
   <target name="doc" depends="-init" description="build documentation">
      <exec dir="${naturaldocs.path}" executable="${naturaldocs.executable}">
         <arg value="-i"/>
         <arg value="${basedir}"/>
         <arg value="-xi"/>
         <arg value="${libdir}"/>
         <arg line="-o HTML"/>
         <arg value="${docdir}"/>
         <arg value="-p"/>
         <arg value="${naturaldocs.dir}"/>
         <arg line="-s Default SamHaXe"/>
         <arg line="-cs UTF-8"/>
      </exec>
   </target>

   <!-- demos target: build sample asset libs and apps -->
   <target name="demos" depends="samhaxe" description="build demo asset libraries and applications">
      <echo message="Building AllDemo"/>
      <exec executable="${bindir}/SamHaXe" dir="${demodir}/AllDemo">
         <arg value="-c"/>
         <arg value="${bindir}/samhaxe.conf.xml"/>
         <arg value="resources.xml"/>
         <arg value="${demodir.bin.assets}/all.swf"/>
      </exec>
      <haxe dir="${demodir}/AllDemo" hxml="build.hxml">
         <classpath refid="project.classpath"/>
         <arg line="${haxe.debug.arg}"/>
         <arg line="-D ${haxe.os}"/>
      </haxe>

      <echo message="Building AnimationDemo"/>
      <exec executable="${bindir}/SamHaXe" dir="${demodir}/AnimationDemo">
         <arg value="-c"/>
         <arg value="${bindir}/samhaxe.conf.xml"/>
         <arg value="resources.xml"/>
         <arg value="${demodir.bin.assets}/animation.swf"/>
      </exec>
      <haxe dir="${demodir}/AnimationDemo" hxml="build.hxml">
         <classpath refid="project.classpath"/>
         <arg line="${haxe.debug.arg}"/>
         <arg line="-D ${haxe.os}"/>
      </haxe>

      <echo message="Building BinaryDemo"/>
      <exec executable="${bindir}/SamHaXe" dir="${demodir}/BinaryDemo">
         <arg value="-c"/>
         <arg value="${bindir}/samhaxe.conf.xml"/>
         <arg value="resources.xml"/>
         <arg value="${demodir.bin.assets}/binary.swf"/>
      </exec>
      <haxe dir="${demodir}/BinaryDemo" hxml="build.hxml">
         <classpath refid="project.classpath"/>
         <arg line="${haxe.debug.arg}"/>
         <arg line="-D ${haxe.os}"/>
      </haxe>
      
      <echo message="Building ClassStubDemo"/>
      <exec executable="${bindir}/SamHaXe" dir="${demodir}/ClassStubDemo">
         <arg value="-c"/>
         <arg value="${bindir}/samhaxe.conf.xml"/>
         <arg value="resources.xml"/>
         <arg value="${demodir.bin.assets}/class_stub.swf"/>
      </exec>
      <haxe dir="${demodir}/ClassStubDemo" hxml="build.hxml">
         <classpath refid="project.classpath"/>
         <arg line="${haxe.debug.arg}"/>
         <arg line="-D ${haxe.os}"/>
      </haxe>

      <echo message="Building FontDemo"/>
      <exec executable="${bindir}/SamHaXe" dir="${demodir}/FontDemo">
         <arg value="-c"/>
         <arg value="${bindir}/samhaxe.conf.xml"/>
         <arg value="resources.xml"/>
         <arg value="${demodir.bin.assets}/font.swf"/>
      </exec>
      <haxe dir="${demodir}/FontDemo" hxml="build.hxml">
         <classpath refid="project.classpath"/>
         <arg line="${haxe.debug.arg}"/>
         <arg line="-D ${haxe.os}"/>
      </haxe>

      <echo message="Building RuntimeFontLoadingDemo"/>
      <exec executable="${bindir}/SamHaXe" dir="${demodir}/RuntimeFontLoadingDemo">
         <arg value="-c"/>
         <arg value="${bindir}/samhaxe.conf.xml"/>
         <arg value="pre_resources.xml"/>
         <arg value="${demodir.bin.assets}/fontcontainer.swf"/>
      </exec>
      <exec executable="${bindir}/SamHaXe" dir="${demodir}/RuntimeFontLoadingDemo">
         <arg value="-c"/>
         <arg value="${bindir}/samhaxe.conf.xml"/>
         <arg value="resources.xml"/>
         <arg value="${demodir.bin.assets}/fontloader.swf"/>
      </exec>
      <haxe dir="${demodir}/RuntimeFontLoadingDemo" hxml="build.hxml">
         <classpath refid="project.classpath"/>
         <arg line="${haxe.debug.arg}"/>
         <arg line="-D ${haxe.os}"/>
      </haxe>


      <echo message="Building ImageDemo"/>
      <exec executable="${bindir}/SamHaXe" dir="${demodir}/ImageDemo">
         <arg value="-c"/>
         <arg value="${bindir}/samhaxe.conf.xml"/>
         <arg value="resources.xml"/>
         <arg value="${demodir.bin.assets}/image.swf"/>
      </exec>
      <haxe dir="${demodir}/ImageDemo" hxml="build.hxml">
         <classpath refid="project.classpath"/>
         <arg line="${haxe.debug.arg}"/>
         <arg line="-D ${haxe.os}"/>
      </haxe>
      
      <echo message="Building LibraryDemo"/>
      <exec executable="${bindir}/SamHaXe" dir="${demodir}/LibraryDemo">
         <arg value="-c"/>
         <arg value="${bindir}/samhaxe.conf.xml"/>
         <arg value="resources.xml"/>
         <arg value="${demodir.bin.assets}/library.swf"/>
      </exec>
      <haxe dir="${demodir}/LibraryDemo" hxml="build.hxml">
         <classpath refid="project.classpath"/>
         <arg line="${haxe.debug.arg}"/>
         <arg line="-D ${haxe.os}"/>
      </haxe>

      <echo message="Building PreloadingDemo"/>
      <exec executable="${bindir}/SamHaXe" dir="${demodir}/PreloadingDemo">
         <arg value="-c"/>
         <arg value="${bindir}/samhaxe.conf.xml"/>
         <arg value="resources.xml"/>
         <arg value="${demodir.bin.assets}/preloading.swf"/>
      </exec>
      <haxe dir="${demodir}/PreloadingDemo" hxml="build.hxml">
         <classpath refid="project.classpath"/>
         <arg line="${haxe.debug.arg}"/>
         <arg line="-D ${haxe.os}"/>
      </haxe>
      
      <echo message="Building SoundDemo"/>
      <exec executable="${bindir}/SamHaXe" dir="${demodir}/SoundDemo">
         <arg value="-c"/>
         <arg value="${bindir}/samhaxe.conf.xml"/>
         <arg value="resources.xml"/>
         <arg value="${demodir.bin.assets}/sound.swf"/>
      </exec>
      <haxe dir="${demodir}/SoundDemo" hxml="build.hxml">
         <classpath refid="project.classpath"/>
         <arg line="${haxe.debug.arg}"/>
         <arg line="-D ${haxe.os}"/>
      </haxe>

   </target>

   <!-- install target: install Sam HaXe and all of its components -->
   <target name="install" depends="samhaxe, doc" description="install SamHaXe and documentation">
      <mkdir dir="${install.path.bin}"/>
      <mkdir dir="${install.path.modules}"/>
      <mkdir dir="${install.path.doc}"/>

      <move file="${bindir}/${samhaxe.executable}" todir="${install.path.bin}"/>
      <copy file="${basedir}/samhaxe.conf.xml.template" tofile="${install.path.config}/samhaxe.conf.xml"/>
      <replace file="${install.path.config}/samhaxe.conf.xml" token="##PATH##" value="${install.path.modules}"/>
      <move todir="${install.path.modules}">
         <fileset dir="${bindir.modules}"/>
      </move>
      <move todir="${install.path.doc}">
         <fileset dir="${docdir}"/>
      </move>
   </target>

   <!-- dist target: build a binary distribution compressed with zip -->
   <target name="dist" depends="samhaxe, doc" description="build binary distribution">
      <delete includeemptydirs="true">
         <fileset dir="${distdir}" includes="**/*"/>
      </delete>

      <property name="distdir.samhaxe" location="${distdir}/samhaxe-${version}"/>

      <mkdir dir="${distdir.samhaxe}"/>
      <mkdir dir="${distdir.samhaxe}/modules"/>
      <mkdir dir="${distdir.samhaxe}/modules/native"/>
      <mkdir dir="${distdir.samhaxe}/doc"/>
      
      <copy file="${bindir}/${samhaxe.executable}" todir="${distdir.samhaxe}"/>
      <copy file="${basedir}/samhaxe.conf.xml.template" todir="${distdir.samhaxe}"/>
      <copy todir="${distdir.samhaxe}/modules">
         <fileset dir="${bindir.modules}"/>
      </copy>
      <copy todir="${distdir.samhaxe}/doc">
         <fileset dir="${docdir}"/>
      </copy>
      <zip basedir="${distdir}" destfile="${distdir}/samhaxe-${version}.zip"/>

      <delete dir="${distdir.samhaxe}"/>
   </target>
</project>
