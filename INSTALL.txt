===============================================
Title: Installation / compilation instructions
===============================================

Section: Compiling from source

---------------------------------
Group: Prerequisities
---------------------------------
Dependencies required by SamHaXe.

To compile SamHaXe you will need several software packages installed on your
system.

Required software:

   HaXe compiler - <http://haxe.org/download> 
   Neko virtual with C dev package - <http://nekovm.org/download>
   Some supported C/C++ sompiler suite - GCC, MinGW or VisualStudio
   ImageMagick with C/C++ dev package - <http://www.imagemagick.org/script/binary-releases.php>
   FreeType 2 with C/C++ dev package - <http://gnuwin32.sourceforge.net/packages/freetype.htm>
   Apache Ant 1.7 or better - <http://ant.apache.org/bindownload.cgi>
   NaturalDocs - <http://www.naturaldocs.org/download.html>

----------------------------------
Group: Build configuration
----------------------------------
Configuring build options, dependencies and installation paths.

After installing the required software packages you should take a look at
_config.ant.sample_ file and create _config.ant_ with the appropriate options
for your system.

Available options:

   haxe.path - (Default: HAXEPATH environment variable) Path to haXe
   executable. It's important to set either this variable correctly or define
   HAXEPATH otherwise ant won't find haXe compiler.

   haxe.stdpath - (Default: haxe.path/std) Path to haXe standard library.

   haxe.debug - (true / _false_) Enable/disable debugging. 

   cpp.compiler - (_g++_ / msvc) C++ compiler to use for compiling native
   modules. The C++ compiler has to be accessible from the command line so you
   should add it to PATH.

   imagemagick.include.path - Path to ImageMagick's header files. Required
   for compiling native image module. You can obtain this value undex linux by
   issuing the command: "pkg-config --cflags-only-I Wand" This is the
   directory where *Magick++.h* is located.

   imagemagick.library.path - Path to ImageMagick's shared library files. This is the
   directory where *CORE_RL_wand_.dll* (MinGW), *CORE_RL_wand_.lib* (MSVC) or
   *libMagickWand.so* / *libWand.so* / *MagickWand.dylib* (gcc) is located.
   
   imagemagick.library.name - Name of ImageMagick's shared library without any
   prefix or suffix. Typical values are: *CORE_RL_wand_* (MinGW and MSVC),
   *MagickWand* or *Wand* (gcc)

   neko.include.path - Path to neko's include files. Required for all native
   modules (image and font). This is the directory where *neko.h* is located.

   neko.library.path - Path to neko's library files. This is the directory
   where *neko.dll* (MinGW), *neko.lib* (MSVC) or *libneko.so* / *neko.dylib*
   (gcc) is located.

   freetype.include.path - Path to FreeType's include directory. This is the
   directory where *ft2build.h* is located.

   freetype.library.path - Path to FreeType's shared library files. This is
   the directory where *freetype6.dll* (MinGW), *freetype.lib* (MSVC) or
   *libfreetype.so* / *freetype.dylib* (gcc) is located.

   freetype.library.name - Name of FreeType's shared library without any
   prefix or suffix. Typical values are: *freetype6* (MinGW) or *freetype*
   (MSVC or GCC).

   naturaldocs.path - (_current working directory_) Path to NaturalDocs' installation
   directory. NaturalDocs will be executed in this directory.

   naturaldocs.executable - (_NaturalDocs_) Full path to NaturalDocs'
   executable. Under windows you should use some\path\NaturalDocs.bat here.

   install.path - (_/usr/local_) Base installation path.

   install.path.bin - (_install.path/bin_) Binaries installation path.

   install.path.modules - (_install.path/lib/samhaxe_) Modules installation
   path.

   install.path.doc - (_install.path/doc/samhaxe_) Documentation installation
   path.

   install.path.config - (_/etc_) Configuration installation path.

Configuring the C++ compiler under windows:

   SamHaXe uses native modules (neko primitives in neko terms) to achieve
   tasks which require using external libraries not currently supported by
   neko. These modules are written in C++ so ant has to be able to invoke the
   appropriate C++ compiler. There are no options concerning the path to the
   compiler so make sure it's accessible from the command line without
   problems. For example MSVC provides a batch file called "Microsoft Visual
   Studio Command Prompt" which is accessible from the start menu. Launching
   this command prompt appends MSVC to PATH environment variable.

Configuring ImageMagick under windows:

   ImageMagick requires some more configuration beyond specifying include and
   library paths. That is because the compiled native modules have to be able
   to locate ImageMagick's DLLs. This can be achieved when two more paths are
   added to the PATH environment variable. Let's assume that ImageMagick is
   installed under _C:\Program Files\ImageMagick_. Then the two additional
   paths are:

      C:\Program Files\ImageMagick - Required for locating CORE_RL_XXXX_.dll
      files.
      C:\Program Files\ImageMagick\modules - Required for sub-modules used by
      ImageMagick.

   Furthermore it looks like that windows binary releases of ImageMagick link
   to Visual C's runtime libraries so you have to install those too. From
   ImageMagick's website:

   > If you have any problems, install the
   > Visual C++ 2008 Redistributable Package (x86) or
   > Visual C++ 2008 Redistributable Package (x64).
   > 64-bit Windows requires both packages (x86 & x64).

   Microsoft Visual C++ 2008 SP1 Redistributable Package (x86) -
      http://www.microsoft.com/downloads/details.aspx?familyid=A5C84275-3B97-4AB7-A40D-3802B2AF5FC2

   Microsoft Visual C++ 2008 SP1 Redistributable Package (x64) -
      http://www.microsoft.com/downloads/details.aspx?familyid=BA9257CA-337F-4B40-8C14-157CFDFFEE4E

----------------------------------
Group: Building SamHaXe
----------------------------------
Compiling the source, building the documentation.

Every component of SamHaXe can be built with the corresponding ant target. You
can build an ant target from the command line issuing the command from the
project's base directory:
> prompt> ant target_name

Available targets are:

   clean - Clean up previously built binaries, documentation, temporary
      files, etc.

   demos - Build several assets and sample SWF applications. Assembled assets
      go to _demos/bin/assets_, compiled applications go to _demos/bin/apps_.

   dist - Build a zip compressed binary distribution.

   doc - Build documentation with NaturalDocs.

   install - Install SamHaXe and documentation into the specified directories.

   modules - Compile SamHaXe modules

   native - Compile native modules.

   samhaxe - Compile the entire source including modules, native modules and
      SamHaXe itself. This is the default target.

To compile SamHaxe issue the following command:
> prompt> ant

This will compile native modules, modules, SamHaXe and place the binaries
under the _bin_ directory.

To install binaries and documentation:
> prompt> ant install


